########################################################################################################################
#
########################################################################################################################
from tree.filterlist import FilterList

########################################################################################################################
#
########################################################################################################################
class JenkinsURLHelper:

    ####################################################################################################################
    #
    ####################################################################################################################
    def __init__(self, url_base:str):
        self.url_base = url_base

    ####################################################################################################################
    #
    ####################################################################################################################
    @property
    def base(self) -> str:
        return f'{self.url_base}'

    ####################################################################################################################
    #
    ####################################################################################################################
    @property
    def crumb(self) -> str:
        return f'{self.base}/crumbIssuer/api/json'

    ####################################################################################################################
    #
    ####################################################################################################################
    @property
    def tree_base(self) -> str:
        return f'{self.base}/api/json?tree'

    ####################################################################################################################
    #
    ####################################################################################################################
    def job_build_info(self, job_name:str, filters:FilterList=None) -> str:
        base = f'{self.base}/job/{job_name}/api/json?depth=1'

        if filters:
            base += (f"&tree={str(filters)}")

        return base

    ####################################################################################################################
    #
    ####################################################################################################################
    def job_info(self, job_name:str) -> str:
        return f'{self.base}/job/{job_name}/api/json'

    ####################################################################################################################
    #
    ####################################################################################################################
    @property
    def base_api(self) -> str:
        return f'{self.base}/api/json'

    ####################################################################################################################
    #
    ####################################################################################################################
    @property
    def queue_info(self) -> str:
        return f'{self.base}/queue/api/json'

    ####################################################################################################################
    #
    ####################################################################################################################
    def queue_item_info(self, queue_id:str=None, partial_queue_url:str=None, filters:FilterList=None) -> str:
        url = partial_queue_url
        if url is None:
            url = f'{self.base}/queue/item/{queue_id}'

        url += '/api/json'

        if filters:
            url += f'?tree={str(filters)}'

    ####################################################################################################################
    #
    ####################################################################################################################
    def start_job(self, job_name:str, params:dict) -> str:
        url = f'{self.base}/job/{job_name}/'

        if params != {}:
            url = url + 'buildWithParameters?' + '&'.join([k+'='+v for k,v in params.items()])
        else:
            url = url + '/build'

        return url

    ####################################################################################################################
    #
    ####################################################################################################################
    def build_base(self, job_name:str, build_id:int) -> str:
        return f'{self.base}/job/{job_name}/{build_id}'

    ####################################################################################################################
    #
    ####################################################################################################################
    def build_info(self, job_name:str, build_id:int, filters:FilterList=None) -> str:
        base = f"{self.build_base(job_name, build_id)}/api/json"

        if filters is not None:
            base += f'?tree={str(filters)}'

        return base

    ####################################################################################################################
    #
    ####################################################################################################################
    def control_job(self, job_name:str, build_id:int, control:str) -> str:
        return f'{self.build_base(job_name, build_id)}/{control}'

    ####################################################################################################################
    #
    ####################################################################################################################
    def stop_job(self, job_name:str, build_id:int) -> str:
        return self.control_job(job_name, build_id, 'stop')

    ####################################################################################################################
    #
    ####################################################################################################################
    def terminate_job(self, job_name:str, build_id:int) -> str:
        return self.control_job(job_name, build_id, 'term')

    ####################################################################################################################
    #
    ####################################################################################################################
    def kill_job(self, job_name:str, build_id:int) -> str:
        return self.control_job(job_name, build_id, 'kill')
